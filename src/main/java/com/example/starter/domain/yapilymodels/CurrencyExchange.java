/*
 * Yapily API
 * The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * The version of the OpenAPI document: 2.14.0
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.starter.domain.yapilymodels;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.math.BigDecimal;
import java.util.Objects;

/**
 * Provides details on the currrency exchange.
 */
@ApiModel(description = "Provides details on the currrency exchange.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-16T14:42:32.575816279Z[Europe/London]")
public class CurrencyExchange {
  public static final String SERIALIZED_NAME_SOURCE_CURRENCY = "sourceCurrency";
  @SerializedName(SERIALIZED_NAME_SOURCE_CURRENCY)
  private String sourceCurrency;

  public static final String SERIALIZED_NAME_TARGET_CURRENCY = "targetCurrency";
  @SerializedName(SERIALIZED_NAME_TARGET_CURRENCY)
  private String targetCurrency;

  public static final String SERIALIZED_NAME_UNIT_CURRENCY = "unitCurrency";
  @SerializedName(SERIALIZED_NAME_UNIT_CURRENCY)
  private String unitCurrency;

  public static final String SERIALIZED_NAME_EXCHANGE_RATE = "exchangeRate";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE)
  private BigDecimal exchangeRate;

  public CurrencyExchange() { 
  }

  public CurrencyExchange sourceCurrency(String sourceCurrency) {
    
    this.sourceCurrency = sourceCurrency;
    return this;
  }

   /**
   * Currency from which an amount is to be converted.
   * @return sourceCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Currency from which an amount is to be converted.")

  public String getSourceCurrency() {
    return sourceCurrency;
  }


  public void setSourceCurrency(String sourceCurrency) {
    this.sourceCurrency = sourceCurrency;
  }


  public CurrencyExchange targetCurrency(String targetCurrency) {
    
    this.targetCurrency = targetCurrency;
    return this;
  }

   /**
   * Currency to which an amount is to be converted.
   * @return targetCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Currency to which an amount is to be converted.")

  public String getTargetCurrency() {
    return targetCurrency;
  }


  public void setTargetCurrency(String targetCurrency) {
    this.targetCurrency = targetCurrency;
  }


  public CurrencyExchange unitCurrency(String unitCurrency) {
    
    this.unitCurrency = unitCurrency;
    return this;
  }

   /**
   * The currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP &#x3D; xxxCUR, the unit currency is GBP.
   * @return unitCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.")

  public String getUnitCurrency() {
    return unitCurrency;
  }


  public void setUnitCurrency(String unitCurrency) {
    this.unitCurrency = unitCurrency;
  }


  public CurrencyExchange exchangeRate(BigDecimal exchangeRate) {
    
    this.exchangeRate = exchangeRate;
    return this;
  }

   /**
   * The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
   * @return exchangeRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.")

  public BigDecimal getExchangeRate() {
    return exchangeRate;
  }


  public void setExchangeRate(BigDecimal exchangeRate) {
    this.exchangeRate = exchangeRate;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrencyExchange currencyExchange = (CurrencyExchange) o;
    return Objects.equals(this.sourceCurrency, currencyExchange.sourceCurrency) &&
        Objects.equals(this.targetCurrency, currencyExchange.targetCurrency) &&
        Objects.equals(this.unitCurrency, currencyExchange.unitCurrency) &&
        Objects.equals(this.exchangeRate, currencyExchange.exchangeRate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceCurrency, targetCurrency, unitCurrency, exchangeRate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrencyExchange {\n");
    sb.append("    sourceCurrency: ").append(toIndentedString(sourceCurrency)).append("\n");
    sb.append("    targetCurrency: ").append(toIndentedString(targetCurrency)).append("\n");
    sb.append("    unitCurrency: ").append(toIndentedString(unitCurrency)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

