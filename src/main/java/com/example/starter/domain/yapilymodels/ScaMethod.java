/*
 * Yapily API
 * The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * The version of the OpenAPI document: 2.14.0
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.starter.domain.yapilymodels;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * __Conditional__. Used to update the authorisation with the sca method of the user&#39;s choice for the &#x60;Institution&#x60; that uses the embedded authorisation flow. If the user has multiple sca methods configured, the &#x60;Institution&#x60; will allow the user to select from each of these options. &lt;br&gt;&lt;br&gt;When the user has multiple sca methods for the &#x60;Institution&#x60;, this is the second step required in the embedded authorisation flow to authorise the &#x60;Consent&#x60;.
 */
@ApiModel(description = "__Conditional__. Used to update the authorisation with the sca method of the user's choice for the `Institution` that uses the embedded authorisation flow. If the user has multiple sca methods configured, the `Institution` will allow the user to select from each of these options. <br><br>When the user has multiple sca methods for the `Institution`, this is the second step required in the embedded authorisation flow to authorise the `Consent`.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-16T14:42:32.575816279Z[Europe/London]")
public class ScaMethod {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Type type;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public ScaMethod() { 
  }

  public ScaMethod id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * __Mandatory__. The id of the sca method provided by the &#x60;Institution&#x60;
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "258211#OPTICAL", required = true, value = "__Mandatory__. The id of the sca method provided by the `Institution`")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public ScaMethod type(Type type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Type getType() {
    return type;
  }


  public void setType(Type type) {
    this.type = type;
  }


  public ScaMethod description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * __Optional__. A description of the sca method if provided by the &#x60;Institution&#x60;
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Testkarte Hr. Haubach_1, optisch", value = "__Optional__. A description of the sca method if provided by the `Institution`")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScaMethod scaMethod = (ScaMethod) o;
    return Objects.equals(this.id, scaMethod.id) &&
        Objects.equals(this.type, scaMethod.type) &&
        Objects.equals(this.description, scaMethod.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, description);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScaMethod {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

